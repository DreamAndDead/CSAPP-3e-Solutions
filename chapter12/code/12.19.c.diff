--- 12.reader.writer.c	2017-05-23 10:40:18.211597754 +0800
+++ 12.19.c	2017-05-23 11:13:27.592381592 +0800
@@ -10,10 +10,10 @@
 static int readtimes;
 static int writetimes;
 static int readcnt;
+// if a reader is waiting when writing, reader first next round
+static int reader_first;
 sem_t mutex, w;
 
-static int number;
-
 void *reader(void *vargp) {
   while (1) {
     P(&mutex);
@@ -22,7 +22,10 @@
       P(&w);
     V(&mutex);
 
+    /* Critical section */
     readtimes++;
+    reader_first = 0;
+    /* Critical section */
 
     P(&mutex);
     readcnt--;
@@ -34,14 +37,22 @@
 
 void *writer(void *vargp) {
   while (1) {
+    if (reader_first == 1)
+      continue;
+
     P(&w);
 
+    /* Critical section */
     writetimes++;
     if (writetimes == WRITE_LIMIT) {
       printf("read/write: %d/%d\n", readtimes, writetimes);
       exit(0);
     }
+    /* Critical section */
 
+    // if a reader is waiting, reader first next round
+    if (readcnt == 1)
+      reader_first = 1;
     V(&w);
   }
 }
@@ -50,6 +61,7 @@
   readcnt = 0;
   readtimes = 0;
   writetimes = 0;
+  reader_first = 0;
   Sem_init(&w, 0, 1);
   Sem_init(&mutex, 0, 1);
 }
@@ -61,12 +73,11 @@
 
   init();
 
-  for (i = 0; i < PEOPLE; i++) {
+  for (i = 0; i < PEOPLE; i++)
     if (i%2 == 0)
       Pthread_create(&tid, NULL, reader, NULL);
     else
       Pthread_create(&tid, NULL, writer, NULL);
-  }
 
   Pthread_exit(NULL);
   exit(0);
