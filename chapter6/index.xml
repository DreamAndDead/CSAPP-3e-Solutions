<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Memory Hierarchy on CASPP 3e Solutions</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/</link><description>Recent content in The Memory Hierarchy on CASPP 3e Solutions</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 26 Feb 2021 09:15:46 +0800</lastBuildDate><atom:link href="https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/index.xml" rel="self" type="application/rss+xml"/><item><title>6.22</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.22/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.22/</guid><description>assume
Bits Per Track
bpt = x * r * K Track Count
tc = (1-x) * r * M M, K are constant
so
Bit Count
bc = K * M * r^2 * (1-x) * x when x == 1/2, bc is maximum</description></item><item><title>6.23</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.23/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.23/</guid><description>T_avg_seek = 4ms
T_avg_rotation = 1/2 * 1/15000 * 60s/min * 1000ms/s = 2ms
T_avg_transfer = 1/15000 * 1/800 * 60s/min * 1000ms/s = 0.005ms
so
T_access = 6.005ms</description></item><item><title>6.24</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.24/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.24/</guid><description>almost same like problem 6.4 on book
A.
best case: blocks are mapped sequential and on same cylinder. just seek data once.
T_avg_seek = 4ms T_avg_rotation = 2ms file size 2MB, block size 512B, block count 2MB/512B = 4000
Block Per Track = 1000, so we need rotate 4 loop to read all data
T_transfer = T_rotation = T_max_rotation * 4 = 16ms so
T_access = 22ms B.</description></item><item><title>6.25</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.25/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.25/</guid><description> m c B E S t s b 32 1024 4 4 64 24 6 2 32 1024 4 256 1 30 0 2 32 1024 8 1 128 22 7 3 32 1024 8 128 1 29 0 3 32 1024 32 1 32 22 5 5 32 1024 32 4 8 24 3 5</description></item><item><title>6.26</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.26/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.26/</guid><description> m c B E S t s b 32 2048 8 1 256 21 8 3 32 2048 4 4 128 23 7 2 32 1024 2 8 64 25 6 1 32 1024 32 2 16 23 4 5</description></item><item><title>6.27</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.27/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.27/</guid><description>A.
t = 0x45 = 0b01000101, s = 0b001, b = xx(xx is 00/01/10/11)
address may be
01000101 001 xx format 0 1000 1010 01xx address range: 0x08A4 - 0x08A7
t = 0x38
address range: 0x0704 - 0x0707
B.
0x1238 - 0x123B</description></item><item><title>6.28</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.28/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.28/</guid><description>same like 6.27
A.
None
B.
0x18F0 - 0x18F3
0x00B0 - 0x00B3
C.
0x0E34 - 0x0E37
D.
0x1BDC - 0x1BDF</description></item><item><title>6.29</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.29/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.29/</guid><description>A.
11 10 9 8 7 6 5 4 3 2 1 0 +----+----+----+----+----+----+----+----+----+----+----+----+ | CT | CT | CT | CT | CT | CT | CT | CT | CI | CI | CO | CO | +----+----+----+----+----+----+----+----+----+----+----+----+ B.
read/write addr hit? value(or unknown) read 0x834 No - write 0x836 Yes unknown read 0xFFD Yes 0xC0</description></item><item><title>6.30</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.30/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.30/</guid><description>A.
C = E * B * S = 128B
B.
12 11 10 9 8 7 6 5 4 3 2 1 0 +----+----+----+----+----+----+----+----+----+----+----+----+----+ | CT | CT | CT | CT | CT | CT | CT | CT | CI | CI | CI | CO | CO | +----+----+----+----+----+----+----+----+----+----+----+----+----+</description></item><item><title>6.31</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.31/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.31/</guid><description>A.
12 11 10 9 8 7 6 5 4 3 2 1 0 +----+----+----+----+----+----+----+----+----+----+----+----+----+ | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | +----+----+----+----+----+----+----+----+----+----+----+----+----+ B.
param value CO 0x02 CI 0x06 CT 0x38 hit? Yes return 0xEB</description></item><item><title>6.32</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.32/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.32/</guid><description>A.
12 11 10 9 8 7 6 5 4 3 2 1 0 +----+----+----+----+----+----+----+----+----+----+----+----+----+ | 1 | 0 | 1 | 1 | 0 | 1 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | +----+----+----+----+----+----+----+----+----+----+----+----+----+ B.
param value CO 0x00 CI 0x02 CT 0xB7 hit? No return &amp;ndash;</description></item><item><title>6.33</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.33/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.33/</guid><description>same like 6.27
0x1788 - 0x178B
0x16C8 - 0x16CB</description></item><item><title>6.34</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.34/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.34/</guid><description>src:
c0 c1 c2 c3 r0 m m h m r1 m h m h r2 m m h m r3 m h m h dst:
c0 c1 c2 c3 r0 m m m m r1 m m m m r2 m m m m r3 m m m m</description></item><item><title>6.35</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.35/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.35/</guid><description>src:
c0 c1 c2 c3 r0 m h h h r1 m h h h r2 m h h h r3 m h h h dst:
c0 c1 c2 c3 r0 m h h h r1 m h h h r2 m h h h r3 m h h h</description></item><item><title>6.36</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.36/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.36/</guid><description>int x[2][128]; int i; int sum = 0; for (i = 0; i &amp;lt; 128; i++) { sum += x[0][i] * x[1][i]; } A.
C = 512, E = 1, B = 16, S = 32
total read count: 2 * 128
x[0][i] address: i*4
x[1][i] address: (128+i)4 = 512 + i4
so x[0][i] and x[1][i] are cached into same block.
miss rate 100%
B.
C = 1024, E = 1, B = 16, S = 64</description></item><item><title>6.37</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.37/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.37/</guid><description>/* * 6.37.c */ typedef int array_t[N][N]; int sumA(array_t a) { int i, j; int sum = 0; for (i = 0; i &amp;lt; N; i++) for (j = 0; j &amp;lt; N; j++) sum += a[i][j]; return sum; } int sumB(array_t a) { int i, j; int sum = 0; for (i = 0; i &amp;lt; N; i++) for (j = 0; j &amp;lt; N; j++) sum += a[j][i]; return sum; } int sumC(array_t a) { int i, j; int sum = 0; for (i = 0; i &amp;lt; N; i+=2) for (j = 0; j &amp;lt; N; j+=2) sum += (a[j][i] + a[j][i+1] + a[j+1][i] + a[j+1][i+1]) } C = 4096, B = 16, E = 1, S = 256</description></item><item><title>6.38</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.38/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.38/</guid><description>A.
4 * 16 * 16
B.
sizeof(point_color) == 16, B = 32
square[i][j].c = 0 miss, cache 2 point_color, then
square[i][j].m = 0 square[i][j].y = 0 square[i][j].k = 0 square[i][j+1].c = 0 square[i][j+1].m = 0 square[i][j+1].y = 0 square[i][j+1].k = 0 all hit
so miss count is 4 * 16 * 16 * 1/8
C.
1/8</description></item><item><title>6.39</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.39/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.39/</guid><description>A.
4 * 16 * 16
B.
sizeof(point_color) == 16, B = 32
square[j][i].c = 0 miss, cache 2 point_color, then
square[j][i].m = 0 square[j][i].y = 0 square[j][i].k = 0 all hit.
next loop
square[j+1][i] - square[j][i] == 16*16 == 256 square[j+1][i] miss, cache block not conflict with square[j][i]
square[j+8][i] - square[j][i] == 16*16*8 == 2048 square[j+8][i] miss, cache block overwrite square[j][i] block. so when we reach square[j][i+1], still miss.</description></item><item><title>6.40</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.40/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.40/</guid><description>A.
4 * 16 * 16
B.
first loop, same like 6.38, but
write count is 16*16, miss rate is 1/2.
second loop, same like 6.39, but
write count is 16163, miss rate is 1/6.
miss count is
16161/2 + 16163*1/6
C.
1/4</description></item><item><title>6.41</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.41/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.41/</guid><description>every loop
buffer[i][j].r = 0; always miss, then cache one piexl, so
buffer[i][j].g = 0; buffer[i][j].b = 0; buffer[i][j].a = 0; all hit
miss rate is 1/4</description></item><item><title>6.42</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.42/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.42/</guid><description>same like
for (i = 0; i &amp;lt; 640; i++) for (j = 0; j &amp;lt; 480; j++) buffer[i][j].r = 0; buffer[i][j].g = 0; buffer[i][j].b = 0; buffer[i][j].a = 0; C = 64KB, B = 4B, sizeof(piexl) = 4
buffer[i][j].r = 0; miss, cache one piexl, so
buffer[i][j].g = 0; buffer[i][j].b = 0; buffer[i][j].a = 0; all hit
miss rate is 1/4</description></item><item><title>6.43</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.43/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.43/</guid><description>same like
for (i = 0; i &amp;lt; 640; i++) for (j = 0; j &amp;lt; 480; j++) (int*)&amp;amp;buffer[i][j] = 0; every loop,
(int*)&amp;amp;buffer[i][j] = 0; always miss
miss rate 100%</description></item><item><title>6.44</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.44/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.44/</guid><description>download mountain program from here
I&amp;rsquo;ve download it into chapter6/code dir
run
(cd ./site/content/chapter6/code/mountain; ./mountain) see result
Clock frequency is approx. 2500.0 MHz Memory mountain (MB/sec) s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 128m 12824 7552 5119 3776 2981 2452 2080 1799 1663 1563 1483 1410 1372 1334 1304 64m 12880 7575 5121 3790 2976 2456 2079 1797 1663 1563 1489 1415 1366 1333 1302 32m 12849 7635 5137 3785 2996 2456 2075 1795 1671 1570 1486 1419 1372 1321 1299 16m 12906 7656 5174 3826 3000 2504 2090 1808 1700 1579 1506 1442 1397 1373 1357 8m 13045 7832 5321 4072 3121 2577 2194 1885 1787 1706 1663 1633 1622 1621 1703 4m 13303 8352 5602 4210 3326 2765 2352 2033 1931 1859 1824 1812 1817 1906 2076 2m 16265 11003 9150 7368 6024 5014 4310 3816 3795 3761 3848 3877 3909 3946 4044 1024k 16708 11597 10180 8150 6605 5544 4772 4169 4109 4150 4136 4127 4113 4127 4119 512k 16674 11613 10179 8160 6595 5543 4787 4182 4245 4242 4300 4360 4416 4508 4668 256k 16929 12872 11826 10661 8538 7360 6383 5724 6516 6951 7181 7297 7041 7634 7768 128k 16992 15381 14141 13145 12497 11444 10028 9734 9642 9638 9671 9696 9606 9438 9117 64k 17109 15238 14163 13563 12263 11302 9736 9412 9175 9162 9239 9200 9267 9229 12245 32k 18060 17655 17503 16954 16785 16489 16718 14382 16135 16512 16471 15799 14318 16250 15337 16k 17809 17534 17326 16516 16783 16406 16250 13333 14043 15280 13890 12546 13347 12394 17062</description></item><item><title>6.45</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.45/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.45/</guid><description>assume matrix size N = 4, cache block size B = 8Byte, sizeof(int) = 4
matrix size 4*4 +--+--+--+--+ |0 |1 |2 |3 | +--+--+--+--+ |4 |5 |6 |7 | +--+--+--+--+ |8 |9 |10|11| +--+--+--+--+ |12|13|14|15| +--+--+--+--+ function transponse
void transpose(int* dst, int* src, int N) { int i, j; for (i = 0; i &amp;lt;= N-1; i++) for (j = 0; j &amp;lt;= N-1; j++) dst[j*N+i] = src[i*N+j]; } every cache block can store 2 int numbers</description></item><item><title>6.46</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.46/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter6/6.46/</guid><description>same like 6.45, pay attention to brilliant comment :)
/* * convert.c */ #include &amp;lt;assert.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;fcntl.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;time.h&amp;gt; // a large prime number #define MATRIX_N 9973 #define MEM_SIZE (sizeof(int) * MATRIX_N * MATRIX_N) #define LOOP 1000 #define BLOCK 16 void randomize(int *arr, int N) { srand(time(0)); int i, j; for (i = 0; i &amp;lt;= N - 1; i++) for (j = 0; j &amp;lt;= N - 1; j++) arr[i * N + j] = rand() % 2; } void convert(int *src, int N) { int i, j; for (i = 0; i &amp;lt;= N - 1; i++) for (j = 0; j &amp;lt;= N - 1; j++) src[j * N + i] = src[i * N + j] || src[j * N + i]; } void effective_convert(int *src, int N) { int i, j, a, b, tmp; for (i = 0; i &amp;lt;= N - BLOCK; i += BLOCK) /* not j = 0 here */ for (j = i; j &amp;lt;= N - BLOCK; j += BLOCK) for (a = i; a &amp;lt; i + BLOCK; a++) for (b = j; b &amp;lt; j + BLOCK; b++) { /* brilliant!</description></item></channel></rss>