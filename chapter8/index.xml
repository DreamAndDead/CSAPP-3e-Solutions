<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exceptional Control Flow on CASPP 3e Solutions</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/</link><description>Recent content in Exceptional Control Flow on CASPP 3e Solutions</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 26 Feb 2021 09:15:46 +0800</lastBuildDate><atom:link href="https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/index.xml" rel="self" type="application/rss+xml"/><item><title>8.9</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.9/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.9/</guid><description> process pair cocurrent? AB No AC Yes AD Yes BC Yes BD Yes CD Yes</description></item><item><title>8.10</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.10/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.10/</guid><description>A. call once, return twice
fork
B. call once, never return
longjmp, execve
C. call once, return 1 or more times
setjmp</description></item><item><title>8.11</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.11/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.11/</guid><description>4 lines
c +-------+ | &amp;quot;hello&amp;quot; | c | p +-------+-------+ | fork &amp;quot;hello&amp;quot; | | c | +-------+ | | &amp;quot;hello&amp;quot; | | | p | p +------+-------+-------+ main fork fork &amp;quot;hello&amp;quot;</description></item><item><title>8.12</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.12/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.12/</guid><description>8 lines
c +-------+---------+ | &amp;quot;hello&amp;quot; &amp;quot;hello&amp;quot; | c | p +-------+-------+---------+ | fork &amp;quot;hello&amp;quot; &amp;quot;hello&amp;quot; | | c | +-------+---------+ | | &amp;quot;hello&amp;quot; &amp;quot;hello&amp;quot; | | | p | p +------+-------+-------+---------+ main fork fork &amp;quot;hello&amp;quot; &amp;quot;hello&amp;quot;</description></item><item><title>8.13</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.13/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.13/</guid><description>x=4 x=3 x=2 pay attention, parent process and child process don&amp;rsquo;t share global x, they have own private x.</description></item><item><title>8.14</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.14/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.14/</guid><description>3 lines
c +-------+ | &amp;quot;hello&amp;quot; | c | p +-------+-------+ | fork &amp;quot;hello&amp;quot; | | p +------+-------+-------+ main fork return &amp;quot;hello&amp;quot;</description></item><item><title>8.15</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.15/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.15/</guid><description>5 lines
c +-------+---------+ | &amp;quot;hello&amp;quot; &amp;quot;hello&amp;quot; | c | p +-------+-------+---------+ | fork &amp;quot;hello&amp;quot; &amp;quot;hello&amp;quot; | | | p +------+-------+-------+ main fork return &amp;quot;hello&amp;quot;</description></item><item><title>8.16</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.16/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.16/</guid><description>counter = 2 child process has its own counter.</description></item><item><title>8.17</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.17/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.17/</guid><description>hello 0 1 Bye 2 Bye hello 1 0 Bye 2 Bye hello 1 Bye 0 2 Bye</description></item><item><title>8.18</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.18/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.18/</guid><description>c +-------+---------+ | &amp;quot;0&amp;quot; exit &amp;quot;2&amp;quot; | c | p +-------+-------+---------+ | fork &amp;quot;1&amp;quot; exit &amp;quot;2&amp;quot; | (atexit) | c | +-------+---------+ | | &amp;quot;0&amp;quot; exit | | | p | p +------+-------+-------+---------+ main fork fork &amp;quot;1&amp;quot; exit 2 must be behind 0/1
B &amp;amp; D is impossible.</description></item><item><title>8.19</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.19/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.19/</guid><description>2^n</description></item><item><title>8.20</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.20/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.20/</guid><description>/* * 8.20.c */ #include &amp;lt;stdio.h&amp;gt;#include &amp;#34;csapp.h&amp;#34; int main(int argc, char* argv[], char* env[]) { if (execve(&amp;#34;/bin/ls&amp;#34;, argv, env) == -1) { fprintf(stderr, &amp;#34;execve error: %s\n&amp;#34;, strerror(errno)); exit(1); } }</description></item><item><title>8.21</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.21/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.21/</guid><description>abc or
bac</description></item><item><title>8.22</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.22/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.22/</guid><description>/* * mysystem.c */ #include &amp;lt;stdio.h&amp;gt;#include &amp;#34;csapp.h&amp;#34; int mysystem(char* command) { pid_t pid; int status; if ((pid = Fork()) == 0) { /* child process */ char* argv[4] = { &amp;#34;&amp;#34;, &amp;#34;-c&amp;#34;, command, NULL }; execve(&amp;#34;/bin/sh&amp;#34;, argv, environ); } /* print child pid so we can kill it */ printf(&amp;#34;child pid: %d\n&amp;#34;, pid); if (Waitpid(pid, &amp;amp;status, 0) &amp;gt; 0) { /* exit normally */ if (WIFEXITED(status)) return WEXITSTATUS(status); /* exit by signal */ if (WIFSIGNALED(status)) return WTERMSIG(status); } } int main(int argc, char* argv[]) { int code; code = mysystem(&amp;#34;.</description></item><item><title>8.23</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.23/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.23/</guid><description>SIGUSR2 SIGUSR2 SIGUSR2 SIGUSR2 SIGUSR2 | | | | | being handled Pending Canceld Canceld Canceld need 1 sec there&amp;rsquo;s only one pending signal all the time. other same type signals will be canceled.
if you modify code
remove sleep
/* sleep(1); */ or
send more signals
for (i = 0; i &amp;lt; 500000; i++) you will get different counter output.</description></item><item><title>8.24</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.24/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.24/</guid><description>/* $begin waitpid1 */ #include &amp;#34;csapp.h&amp;#34;#define N 2 #define LEN 100 int main() { int status, i; pid_t pid; /* Parent creates N children */ for (i = 0; i &amp;lt; N; i++) if ((pid = Fork()) == 0) { /* access address 0, cause fault */ char* cptr = NULL; *cptr = &amp;#39;d&amp;#39;; } /* Parent reaps N children in no particular order */ while ((pid = waitpid(-1, &amp;amp;status, 0)) &amp;gt; 0) { if (WIFEXITED(status)) printf(&amp;#34;child %d terminated normally with exit status=%d\n&amp;#34;, pid, WEXITSTATUS(status)); else if (WIFSIGNALED(status)) { /* print signal that cause process exit */ char buf[LEN]; sprintf(buf, &amp;#34;child %d terminated by signal %d&amp;#34;, pid, WTERMSIG(status)); psignal(WTERMSIG(status), buf); } else printf(&amp;#34;child %d terminated abnormally\n&amp;#34;, pid); } /* The only normal termination is if there are no more children */ if (errno !</description></item><item><title>8.25</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.25/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.25/</guid><description>/* * 8.25.c */ #include &amp;lt;stdio.h&amp;gt;#include &amp;#34;csapp.h&amp;#34; sigjmp_buf buf; void handler(int sig) { /* jump */ siglongjmp(buf, 1); } char* tfgets(char* s, int size, FILE* stream) { char* result; if (!sigsetjmp(buf, 1)) { alarm(5); if (signal(SIGALRM, handler) == SIG_ERR) unix_error(&amp;#34;set alarm handler error&amp;#34;); return fgets(s, size, stream); } else { /* run out of time */ return NULL; } } #define LEN 100 int main(int argc, char* argv[]) { char buf[LEN]; char* input = tfgets(buf, LEN, stdin); if (input == NULL) { printf(&amp;#34;nothing input: NULL\n&amp;#34;); } else { printf(&amp;#34;%s&amp;#34;, input); } return 0; }</description></item><item><title>8.26</title><link>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.26/</link><pubDate>Fri, 26 Feb 2021 09:15:46 +0800</pubDate><guid>https://dreamanddead.github.io/CSAPP-3e-Solutions/chapter8/8.26/</guid><description>learn
origin shell code in pic 8-23, pic 8-24, pic 8-25 how to use waitpid in pic 8-18 how to wait child process in pic 8-42 and write a job management module
compose them and the little shell is born.
add bg fg jobs command to origin shell program
#include &amp;lt;assert.h&amp;gt;#include &amp;#34;../csapp.h&amp;#34;#include &amp;#34;shell.h&amp;#34;#include &amp;#34;job.h&amp;#34; void eval(char *cmdline) { char *argv[MAXARGS]; /* Argument list execve() */ char buf[MAXLINE]; /* Holds modified command line */ int bg; /* Should the job run in bg or fg?</description></item></channel></rss>